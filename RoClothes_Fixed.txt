--[[	

	/ Ôº≤ÔºØÔº£Ôº¨ÔºØÔº¥Ôº®Ôº•Ôº≥
	Version - 0.7.5 (Fixed Bundle Issues)
	| RoClothes is a Client-Sided Exploiting Script, that allows the player to have nude BodyParts/Clothes
	Can be used on any executor
	
	| This script WILL cause FPS drops, because of BodyParts/Clothes meshes inside the Player model
	
	| ùêîùêíùêÑ ùêÄùêì ùêòùêéùêîùêë ùêéùêñùêç ùêëùêàùêíùêä
	| ùêñùêéùêëùêä ùêàùêç ùêèùêëùêéùêÜùêëùêÑùêíùêí
	
	The original developer of RoClothes is no longer working on this script.
	This is a MODDED version of this script that might or might not be updated.
	If you know who the creator of this mod is, feel free to make requests or suggest some things.
	
	FIXES IN THIS VERSION:
	- Fixed bundle persistence issues where previous bundle items remain when switching
	- Added proper bundle clearing when switching between different bundles
	- Improved CharacterReset function to properly clear CurrentBundle
	- Added bundle state management to prevent item conflicts
	
	original version 0.7
	local version 0.7.5:lerp()
]]

local RS = game:GetService("RunService")

function RoClothes(Player)
	warn("RoClothes Connected - Fixed Bundle Version")

	--[[
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------
	]]

	local GUIObject = {}

	GUIObject.Screen = Instance.new("ScreenGui")
	GUIObject.MainFrame = Instance.new("TextButton")
	GUIObject.Dragger = Instance.new("UIDragDetector")
	GUIObject.PageFrame = Instance.new("Frame")
	GUIObject.UIGradient = Instance.new("UIGradient")
	GUIObject.UICorner = Instance.new("UICorner")
	GUIObject.Clothes_3 = Instance.new("Frame")
	GUIObject.ClothesSearch = Instance.new("TextBox")
	GUIObject.UIGradient_34 = Instance.new("UIGradient")
	GUIObject.UICorner_35 = Instance.new("UICorner")
	GUIObject.ClothesButtonFrame = Instance.new("ScrollingFrame")
	GUIObject.UIGridLayout = Instance.new("UIGridLayout")
	GUIObject.Menu = Instance.new("Frame")
	GUIObject.DestroyFrame = Instance.new("Frame")
	GUIObject.UIAspectRatioConstraint_2 = Instance.new("UIAspectRatioConstraint")
	GUIObject.UIGradient_3 = Instance.new("UIGradient")
	GUIObject.UICorner_3 = Instance.new("UICorner")
	GUIObject.DestroyButton = Instance.new("TextButton")
	GUIObject.PlayerFrame = Instance.new("Frame")
	GUIObject.UIGradient_4 = Instance.new("UIGradient")
	GUIObject.UICorner_4 = Instance.new("UICorner")
	GUIObject.PlayerExecute = Instance.new("TextBox")
	GUIObject.BreastsTypeFrame = Instance.new("Frame")
	GUIObject.UIGradient_5 = Instance.new("UIGradient")
	GUIObject.UICorner_5 = Instance.new("UICorner")
	GUIObject.BreastsTypeButton = Instance.new("TextButton")
	GUIObject.BundleFrame = Instance.new("Frame")
	GUIObject.UIGradient_6 = Instance.new("UIGradient")
	GUIObject.UICorner_6 = Instance.new("UICorner")
	GUIObject.BundleText = Instance.new("TextLabel")
	GUIObject.DelayFrame = Instance.new("Frame")
	GUIObject.UIGradient_7 = Instance.new("UIGradient")
	GUIObject.UICorner_7 = Instance.new("UICorner")
	GUIObject.DelayTimeText = Instance.new("TextBox")
	GUIObject.AutoExecuteFrame = Instance.new("Frame")
	GUIObject.UICorner_8 = Instance.new("UICorner")
	GUIObject.UIGradient_8 = Instance.new("UIGradient")
	GUIObject.AutoExecuteButton = Instance.new("TextButton")
	GUIObject.BundleBodyColorFrame = Instance.new("Frame")
	GUIObject.UIGradient_15 = Instance.new("UIGradient")
	GUIObject.UICorner_15 = Instance.new("UICorner")
	GUIObject.BundleBodyColorButton = Instance.new("TextButton")
	GUIObject.ResetFrame = Instance.new("Frame")
	GUIObject.UICorner_9 = Instance.new("UICorner")
	GUIObject.UIGradient_9 = Instance.new("UIGradient")
	GUIObject.ResetButton = Instance.new("TextButton")
	GUIObject.ExecuteFrame = Instance.new("Frame")
	GUIObject.UICorner_10 = Instance.new("UICorner")
	GUIObject.UIGradient_10 = Instance.new("UIGradient")
	GUIObject.ExecuteButton = Instance.new("TextButton")
	GUIObject.ToneFrame = Instance.new("Frame")
	GUIObject.UIGradient_11 = Instance.new("UIGradient")
	GUIObject.UICorner_11 = Instance.new("UICorner")
	GUIObject.ToneButton = Instance.new("TextButton")
	GUIObject.Bundles = Instance.new("Frame")
	GUIObject.BundlesButtonFrame = Instance.new("ScrollingFrame")
	GUIObject.UIGridLayout_2 = Instance.new("UIGridLayout")
	GUIObject.ButtonFrame = Instance.new("Frame")
	GUIObject.UIListLayout = Instance.new("UIListLayout")
	GUIObject.FaceFrame = Instance.new("Frame")
	GUIObject.UIGradient_17 = Instance.new("UIGradient")
	GUIObject.UICorner_17 = Instance.new("UICorner")
	GUIObject.FaceButton = Instance.new("TextButton")
	GUIObject.Menu_2 = Instance.new("Frame")
	GUIObject.UIAspectRatioConstraint_3 = Instance.new("UIAspectRatioConstraint")
	GUIObject.UICorner_12 = Instance.new("UICorner")
	GUIObject.MenuButton = Instance.new("TextButton")
	GUIObject.UIGradient_12 = Instance.new("UIGradient")
	GUIObject.Clothes_2 = Instance.new("Frame")
	GUIObject.UIAspectRatioConstraint_4 = Instance.new("UIAspectRatioConstraint")
	GUIObject.UICorner_13 = Instance.new("UICorner")
	GUIObject.ClothesButton = Instance.new("TextButton")
	GUIObject.UIGradient_13 = Instance.new("UIGradient")
	GUIObject.Bundles_2 = Instance.new("Frame")
	GUIObject.UIAspectRatioConstraint_5 = Instance.new("UIAspectRatioConstraint")
	GUIObject.UICorner_14 = Instance.new("UICorner")
	GUIObject.BundlesButton = Instance.new("TextButton")
	GUIObject.UIGradient_14 = Instance.new("UIGradient")
	GUIObject.NameFrame = Instance.new("Frame")
	GUIObject.NameText = Instance.new("TextLabel")
	GUIObject.VersionText = Instance.new("TextLabel")
	GUIObject.KeybindFrame = Instance.new("Frame")
	GUIObject.UIGradient_16 = Instance.new("UIGradient")
	GUIObject.UICorner_16 = Instance.new("UICorner")
	GUIObject.KeybindButton = Instance.new("TextButton")
	GUIObject.RoClothes = Instance.new("ScreenGui")
	GUIObject.Menu2 = Instance.new("Frame")
	GUIObject.LocalTransparencyFrame = Instance.new("Frame")
	GUIObject.UIGradient_18 = Instance.new("UIGradient")
	GUIObject.UICorner_18 = Instance.new("UICorner")
	GUIObject.LocalTransparencyButton = Instance.new("TextBox")
	GUIObject.CharacterFrame = Instance.new("Frame")
	GUIObject.UIAspectRatioConstraint_6 = Instance.new("UIAspectRatioConstraint")
	GUIObject.LeftArmButton = Instance.new("ImageButton")
	GUIObject.TorsoButton = Instance.new("ImageButton")
	GUIObject.RightArmButton = Instance.new("ImageButton")
	GUIObject.RightLegButton = Instance.new("ImageButton")
	GUIObject.LeftLegButton = Instance.new("ImageButton")
	GUIObject.HeadButton = Instance.new("ImageButton")
	GUIObject.UICorner_19 = Instance.new("UICorner")
	GUIObject.Menu2_2 = Instance.new("Frame")
	GUIObject.UIAspectRatioConstraint_7 = Instance.new("UIAspectRatioConstraint")
	GUIObject.UICorner_20 = Instance.new("UICorner")
	GUIObject.Menu2Button = Instance.new("TextButton")
	GUIObject.UIGradient_19 = Instance.new("UIGradient")
	GUIObject.MeshSizeLockFrame = Instance.new("Frame")
	GUIObject.UIGradient_20 = Instance.new("UIGradient")
	GUIObject.UICorner_21 = Instance.new("UICorner")
	GUIObject.MeshSizeLockButton = Instance.new("TextButton")
	GUIObject.AccessorySizeLockFrame = Instance.new("Frame")
	GUIObject.UIGradient_21 = Instance.new("UIGradient")
	GUIObject.UICorner_22 = Instance.new("UICorner")
	GUIObject.AccessorySizeLockButton = Instance.new("TextButton")
	GUIObject.MeshBasePartInvisibleFrame = Instance.new("Frame")
	GUIObject.UIGradient_22 = Instance.new("UIGradient")
	GUIObject.UICorner_23 = Instance.new("UICorner")
	GUIObject.MeshBasePartInvisibleButton = Instance.new("TextButton")
	GUIObject.BodyPartPhysicsFrame = Instance.new("Frame")
	GUIObject.UIGradient_23 = Instance.new("UIGradient")
	GUIObject.UICorner_24 = Instance.new("UICorner")
	GUIObject.BodyPartPhysicsButton = Instance.new("TextButton")
	GUIObject.MethodFrame = Instance.new("Frame")
	GUIObject.UIGradient_24 = Instance.new("UIGradient")
	GUIObject.UICorner_25 = Instance.new("UICorner")
	GUIObject.MethodButton = Instance.new("TextButton")
	GUIObject.Edit_2 = Instance.new("Frame")
	GUIObject.UIAspectRatioConstraint_9 = Instance.new("UIAspectRatioConstraint")
	GUIObject.UICorner_33 = Instance.new("UICorner")
	GUIObject.EditButton = Instance.new("TextButton")
	GUIObject.UIGradient_32 = Instance.new("UIGradient")
	GUIObject.Catalog_2 = Instance.new("Frame")
	GUIObject.UIAspectRatioConstraint_8 = Instance.new("UIAspectRatioConstraint")
	GUIObject.UICorner_34 = Instance.new("UICorner")
	GUIObject.CatalogButton = Instance.new("TextButton")
	GUIObject.UIGradient_33 = Instance.new("UIGradient")
	GUIObject.Catalog_3 = Instance.new("Frame")
	GUIObject.UsernameFrame = Instance.new("Frame")
	GUIObject.UICorner_27 = Instance.new("UICorner")
	GUIObject.UsernameTextbox = Instance.new("TextBox")
	GUIObject.UIGradient_26 = Instance.new("UIGradient")
	GUIObject.AccessoryFrame = Instance.new("Frame")
	GUIObject.UICorner_28 = Instance.new("UICorner")
	GUIObject.AccessoryTextbox = Instance.new("TextBox")
	GUIObject.UIGradient_27 = Instance.new("UIGradient")
	GUIObject.ShirtFrame = Instance.new("Frame")
	GUIObject.UICorner_29 = Instance.new("UICorner")
	GUIObject.ShirtTextbox = Instance.new("TextBox")
	GUIObject.UIGradient_28 = Instance.new("UIGradient")
	GUIObject.PantsFrame = Instance.new("Frame")
	GUIObject.UICorner_30 = Instance.new("UICorner")
	GUIObject.PantsTextbox = Instance.new("TextBox")
	GUIObject.UIGradient_29 = Instance.new("UIGradient")
	GUIObject.ShirtGraphicFrame = Instance.new("Frame")
	GUIObject.UICorner_31 = Instance.new("UICorner")
	GUIObject.ShirtGraphicTextbox = Instance.new("TextBox")
	GUIObject.UIGradient_30 = Instance.new("UIGradient")
	GUIObject.Edit = Instance.new("Frame")
	GUIObject.MeshNameFrame = Instance.new("Frame")
	GUIObject.UICorner_32 = Instance.new("UICorner")
	GUIObject.MeshNameTextbox = Instance.new("TextBox")
	GUIObject.UIGradient_31 = Instance.new("UIGradient")
	GUIObject.PropertyListFrame = Instance.new("ScrollingFrame")
	GUIObject.UIGridLayout_4 = Instance.new("UIGridLayout")
	GUIObject.EditNote = Instance.new("TextLabel")
	GUIObject.CharacterPreviewFrame = Instance.new("Frame")
	GUIObject.ViewportFrame = Instance.new("ViewportFrame")
	GUIObject.ViewportCamera = Instance.new("Camera")
	GUIObject.PreviewUIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
	GUIObject.PreviewButton = Instance.new("TextButton")
	GUIObject.ClickExecuteFrame = Instance.new("Frame")
	GUIObject.UIGradientCE = Instance.new("UIGradient")

	local PlayerData = {}
	local SelectPlayer = Player.Name
	local KeybindDetect = false
	local debounce = false
	local NPCs = {}
	local Method = 1
	local Method2CharacterFolder = Instance.new("Folder", game.workspace)
	Method2CharacterFolder.Name = "RoClothesMethod2"

	-- FIXED: Improved bundle state management
	local BundleState = {
		PreviousBundle = "nil",
		CurrentBundle = "nil",
		BundleItems = {},
		BundleAccessories = {},
		BundleClothes = {}
	}

	local BodyPartSize = {
		["Torso"] = Vector3.new(2,2,1),
		["Left Arm"] = Vector3.new(1,2,1),
		["Right Arm"] = Vector3.new(1,2,1),
		["Left Leg"] = Vector3.new(1,2,1),
		["Right Leg"] = Vector3.new(1,2,1),
		["Head"] = Vector3.new(1,1,1),
	}

	local BodyColorPart = {
		"Torso",
		"Left Arm",
		"Right Arm", 
		"Left Leg",
		"Right Leg",
		"Head"
	}

	local AttachmentCFrame = {
		["TorsoAttachment"] = CFrame.new(0,0,0),
		["LeftArmAttachment"] = CFrame.new(0,0,0),
		["RightArmAttachment"] = CFrame.new(0,0,0),
		["LeftLegAttachment"] = CFrame.new(0,0,0),
		["RightLegAttachment"] = CFrame.new(0,0,0),
		["HeadAttachment"] = CFrame.new(0,0,0),
	}

	local PartList = {
		["Torso"] = {Size = Vector3.new(2,2,1), Color = Color3.new(0.6392156862745098, 0.6352941176470588, 0.6470588235294118)},
		["Left Arm"] = {Size = Vector3.new(1,2,1), Color = Color3.new(0.6392156862745098, 0.6352941176470588, 0.6470588235294118)},
		["Right Arm"] = {Size = Vector3.new(1,2,1), Color = Color3.new(0.6392156862745098, 0.6352941176470588, 0.6470588235294118)},
		["Left Leg"] = {Size = Vector3.new(1,2,1), Color = Color3.new(0.6392156862745098, 0.6352941176470588, 0.6470588235294118)},
		["Right Leg"] = {Size = Vector3.new(1,2,1), Color = Color3.new(0.6392156862745098, 0.6352941176470588, 0.6470588235294118)},
		["Head"] = {Size = Vector3.new(1,1,1), Color = Color3.new(0.6392156862745098, 0.6352941176470588, 0.6470588235294118)},
	}

	local Clothes = {
		["nil"] = {Weld = {}},
	}

	local Bundle = {
		["nil"] = {
			["Accessory"] = {},
			["Clothes"] = {},
			["Body Color"] = {},
			["TClothes"] = {},
			["NippleColor"] = nil,
			["Override"] = false,
			["ClothingBundle"] = false,
			["IsPreset"] = false
		}
	}

	-- FIXED: Enhanced bundle clearing function
	local function ClearBundleState(PlayerName)
		if PlayerData[PlayerName] then
			-- Clear previous bundle state
			BundleState.PreviousBundle = PlayerData[PlayerName].CurrentBundle
			BundleState.CurrentBundle = "nil"
			
			-- Clear all bundle-related items
			if PlayerData[PlayerName].CurrentPartList then
				-- Clear accessories from previous bundle
				if PlayerData[PlayerName].CurrentPartList.Accessory then
					for _, accessory in pairs(PlayerData[PlayerName].CurrentPartList.Accessory) do
						if accessory and accessory.Parent then
							accessory:Destroy()
						end
					end
				end
				
				-- Clear clothes from previous bundle
				if PlayerData[PlayerName].CurrentPartList.Clothes then
					for _, clothing in pairs(PlayerData[PlayerName].CurrentPartList.Clothes) do
						if clothing and clothing.Parent then
							clothing:Destroy()
						end
					end
				end
				
				-- Reset transparency
				if PlayerData[PlayerName].CurrentPartList.ParentTransparency then
					for Object, Property in pairs(PlayerData[PlayerName].CurrentPartList.ParentTransparency) do
						if Object and Object.Parent then
							local D = Property.Default
							if D ~= nil then
								Object.Transparency = D
							end
						end
					end
				end
			end
			
			-- Reset CurrentBundle to nil
			PlayerData[PlayerName].CurrentBundle = "nil"
		end
	end

	-- FIXED: Enhanced bundle switching function
	local function SwitchBundle(PlayerName, NewBundle)
		if PlayerData[PlayerName] then
			-- Clear previous bundle completely
			ClearBundleState(PlayerName)
			
			-- Set new bundle
			if NewBundle and NewBundle ~= "nil" then
				PlayerData[PlayerName].CurrentBundle = NewBundle
				BundleState.CurrentBundle = NewBundle
				BundleState.PreviousBundle = "nil"
			end
		end
	end

	local Function = {}

	function Function.PlayerDataDefault()
		return {
			CurrentBundle = "nil",
			CurrentClothes = {},
			ClothesRecolor = {},
			BundleBodyColor = true,
			Face = true,
			MeshSizeLock = true,
			AccessorySizeLock = true,
			MeshBasePartInvisible = true,
			BodyPartPhysics = true,
			Tone = "Base",
			SkinTone = nil,
			DelayTime = 0.1,
			AutoExecute = false,
			Cooldown = false,
			OldestClothings = {
				Shirt = nil,
				Pants = nil,
				ShirtGraphic = nil
			},
			CurrentPartList = {
				Organ = {},
				Clothes = {},
				Accessory = {},
				ParentTransparency = {},
				RealtimeUpdateList = {
					Accessory = {},
					Clothes = {},
					Organ = {}
				}
			}
		}
	end

	function Function.PlayerDataAdd(PlayerName)
		if PlayerData[PlayerName] == nil then
			PlayerData[PlayerName] = Function.PlayerDataDefault()
		end
	end

	-- FIXED: Enhanced CharacterReset function with proper bundle clearing
	function Function.CharacterReset(PlayerName, NPCClear)
		local ExecutePlayer
		if typeof(PlayerName) ~= "Instance" then
			ExecutePlayer = game.Players:FindFirstChild(PlayerName)
		end

		local PartListPlayer = nil

		if not ExecutePlayer then
			if GUIObject.PlayerExecute.Text == "Self" then
				ExecutePlayer = Player
				PartListPlayer = PlayerData[ExecutePlayer.Name].CurrentPartList
			end
		else
			if PlayerData[ExecutePlayer.Name] == nil then
				return
			end
			PartListPlayer = PlayerData[ExecutePlayer.Name].CurrentPartList
		end

		if type(PlayerName) ~= "string" and Function.IsCharacter(PlayerName) then
			if Function.TableFind(NPCs, PlayerName) == nil then 
				return
			else
				for i, v in pairs(PlayerName:GetDescendants()) do
					if v.ClassName == "MeshPart" then
						if v.Parent == PlayerName:FindFirstChild("Torso") or v.Parent == PlayerName:FindFirstChild("Left Leg") or v.Parent == PlayerName:FindFirstChild("Right Leg") or
							v.Parent == PlayerName:FindFirstChild("Left Arm") or v.Parent == PlayerName:FindFirstChild("Right Arm") then
							v:Destroy()
						end
					end
				end
				if NPCClear == true then
					PlayerData[Function.TableFind(NPCs, PlayerName)] = nil
				end
			end
			return
		end

		if PlayerData[ExecutePlayer.Name]["Cooldown"] == true then
			return
		end

		if PartListPlayer and ExecutePlayer.Character then
			local OrganList = PartListPlayer["Organ"]
			local ClothesList = PartListPlayer["Clothes"]
			local AccessoryList = PartListPlayer["Accessory"]
			local ParentTransparencyList = PartListPlayer["ParentTransparency"]

			-- FIXED: Enhanced clearing with proper bundle state management
			if OrganList then
				for _, v in pairs(OrganList) do
					if v and v.Parent then
						v:Destroy()
					end
				end
			end

			if ClothesList then
				for _, v in pairs(ClothesList) do
					if v and v.Parent then
						v:Destroy()
					end
				end
			end

			if AccessoryList then
				for _, v in pairs(AccessoryList) do
					if v and v.Parent then
						v:Destroy()
					end
				end
			end

			if ParentTransparencyList then
				for Object, Property in pairs(ParentTransparencyList) do
					if Object and Object.Parent then
						local D = Property.Default
						if D ~= nil then
							Object.Transparency = D
						end
					end
				end
			end

			-- FIXED: Reset CurrentBundle to nil and clear bundle state
			PlayerData[ExecutePlayer.Name].CurrentBundle = "nil"
			BundleState.CurrentBundle = "nil"
			BundleState.PreviousBundle = "nil"
			BundleState.BundleItems = {}
			BundleState.BundleAccessories = {}
			BundleState.BundleClothes = {}

			PlayerData[ExecutePlayer.Name].CurrentPartList = Function.PlayerDataDefault().CurrentPartList

			-- Clear visibility tags
			for i, v in pairs(game:GetService("CollectionService"):GetTagged("Visibility")) do
				if v and v.Parent then
					v.Transparency = v:GetAttribute("Visibility")
					v:SetAttribute("Visibility", nil)
					v:RemoveTag("Visibility")
				end
			end

			-- Restore original clothing
			if PlayerData[ExecutePlayer.Name].OldestClothings.Shirt then
				if ExecutePlayer.Character:FindFirstChildOfClass("Shirt") then
					ExecutePlayer.Character:FindFirstChildOfClass("Shirt"):Destroy()
				end
				PlayerData[ExecutePlayer.Name].OldestClothings.Shirt:Clone().Parent = ExecutePlayer.Character
				PlayerData[ExecutePlayer.Name].OldestClothings.Shirt = nil
			end
			if PlayerData[ExecutePlayer.Name].OldestClothings.Pants then
				if ExecutePlayer.Character:FindFirstChildOfClass("Pants") then
					ExecutePlayer.Character:FindFirstChildOfClass("Pants"):Destroy()
				end
				PlayerData[ExecutePlayer.Name].OldestClothings.Pants:Clone().Parent = ExecutePlayer.Character
				PlayerData[ExecutePlayer.Name].OldestClothings.Pants = nil
			end
			if PlayerData[ExecutePlayer.Name].OldestClothings.ShirtGraphic then
				if ExecutePlayer.Character:FindFirstChildOfClass("ShirtGraphic") then
					ExecutePlayer.Character:FindFirstChildOfClass("ShirtGraphic"):Destroy()
				end
				PlayerData[ExecutePlayer.Name].OldestClothings.ShirtGraphic:Clone().Parent = ExecutePlayer.Character
				PlayerData[ExecutePlayer.Name].OldestClothings.ShirtGraphic = nil
			end
		end
	end

	-- FIXED: Enhanced bundle execution with proper clearing
	function Function.BundleExecute(PlayerName, BundleName)
		if not PlayerData[PlayerName] then
			Function.PlayerDataAdd(PlayerName)
		end

		-- Clear previous bundle completely before applying new one
		ClearBundleState(PlayerName)

		-- Set new bundle
		if BundleName and BundleName ~= "nil" then
			PlayerData[PlayerName].CurrentBundle = BundleName
			BundleState.CurrentBundle = BundleName
		end

		-- Execute the bundle
		if PlayerData[PlayerName] and game.Players:FindFirstChild(PlayerName) and game.Players:FindFirstChild(PlayerName).Character then
			local Character = game.Players:FindFirstChild(PlayerName).Character
			local HumanoidDescription = game.Players:FindFirstChild(PlayerName).Character:FindFirstChildOfClass("Humanoid"):GetAppliedDescription()

			-- Apply bundle accessories and clothes
			if Bundle[BundleName] then
				Function.AccessoryLoaderFunction(Character, CharacterAttachment, BundleName, PlayerName)
				Function.BodyColorsFunction(Character, BundleName, PlayerName)
			end
		end
	end

	function Function.BodyColorsFunction(Character, SelectBundle, Data)
		if Bundle[SelectBundle]["Body Color"] ~= nil and PlayerData[Data].BundleBodyColor then
			local BodyColors = Character:FindFirstChildOfClass("BodyColors") or Instance.new("BodyColors", Character)

			for i, v in pairs(Bundle[SelectBundle]["Body Color"]) do
				BodyColors[i] = v
			end

			Function.BodyColorSet(Character, BodyColors)

			if Method == 2 then
				Character = Character:FindFirstChildOfClass("ObjectValue").Value

				local BodyColors = Character:FindFirstChildOfClass("BodyColors") or Instance.new("BodyColors", Character)

				for i, v in pairs(Bundle[SelectBundle]["Body Color"]) do
					BodyColors[i] = v
				end

				Function.BodyColorSet(Character, BodyColors)
			end
		end
	end

	-- FIXED: Enhanced accessory loader with proper bundle state management
	function Function.AccessoryLoaderFunction(Character, CharacterAttachment, SelectBundle, Data)
		if not Bundle[SelectBundle] then return end

		-- Clear existing accessories from previous bundle
		if PlayerData[Data].CurrentPartList.Accessory then
			for _, accessory in pairs(PlayerData[Data].CurrentPartList.Accessory) do
				if accessory and accessory.Parent then
					accessory:Destroy()
				end
			end
			PlayerData[Data].CurrentPartList.Accessory = {}
		end

		-- Clear existing clothes from previous bundle
		if PlayerData[Data].CurrentPartList.Clothes then
			for _, clothing in pairs(PlayerData[Data].CurrentPartList.Clothes) do
				if clothing and clothing.Parent then
					clothing:Destroy()
				end
			end
			PlayerData[Data].CurrentPartList.Clothes = {}
		end

		-- Apply new bundle accessories
		local IsAdded = Function.HumanoidDescriptionSet(Bundle[SelectBundle]["Accessory"], Bundle[SelectBundle]["Clothes"], HumanoidDescription)

		if IsAdded then
			game.Players:FindFirstChild(Data):LoadCharacterWithHumanoidDescription(HumanoidDescription)
		end

		-- Apply bundle-specific clothes
		if Bundle[SelectBundle]["TClothes"] then
			for i, v in pairs(Bundle[SelectBundle]["TClothes"]) do
				Function.ClothesAdd(Character, v, CharacterAttachment, Data)
			end
		end

		-- Handle nipple color override
		if Bundle[SelectBundle]["NippleColor"] and PlayerData[Data].Tone == "SkinTone Override" and PlayerData[Data].SkinTone == nil then
			PlayerData[Data].SkinTone = Bundle[SelectBundle]["NippleColor"]
		end
	end

	-- FIXED: Enhanced bundle button click handler
	local function CreateBundleButtonClickHandler(BButton, BundleData, PlayerName)
		return function()
			-- Clear previous bundle completely
			ClearBundleState(PlayerName)
			
			-- Set new bundle
			if (not BundleData.ClothingBundle or BundleData.ClothingBundle == false) and (not BundleData.IsPreset or BundleData.IsPreset == false) then
				PlayerData[PlayerName].CurrentBundle = BButton.Name
				BundleState.CurrentBundle = BButton.Name
			end

			-- Execute bundle
			Function.BundleExecute(PlayerName, BButton.Name)
			
			Function.GUIUpdate()
		end
	end

	-- FIXED: Enhanced bundle switching in main execution
	function Function.ExecuteBundle(DataDetail, Character, CharacterAttachment)
		-- Clear previous bundle state
		if DataDetail.CurrentBundle ~= "nil" and DataDetail.CurrentBundle ~= BundleState.CurrentBundle then
			ClearBundleState(DataDetail.Name)
		end

		-- Apply new bundle
		if DataDetail.CurrentBundle ~= "nil" and (not Bundle[DataDetail.CurrentBundle]["Override"] or Bundle[DataDetail.CurrentBundle]["Override"] == false) then
			-- Clear existing items first
			if PlayerData[DataDetail.Name].CurrentPartList.Accessory then
				for _, accessory in pairs(PlayerData[DataDetail.Name].CurrentPartList.Accessory) do
					if accessory and accessory.Parent then
						accessory:Destroy()
					end
				end
			end

			if PlayerData[DataDetail.Name].CurrentPartList.Clothes then
				for _, clothing in pairs(PlayerData[DataDetail.Name].CurrentPartList.Clothes) do
					if clothing and clothing.Parent then
						clothing:Destroy()
					end
				end
			end

			-- Apply new bundle
			if DataDetail.CurrentBundle ~= "Bald" then
				Function.AccessoryLoaderFunction(Character, CharacterAttachment, DataDetail.CurrentBundle, DataDetail.Name)
				Function.BodyColorsFunction(Character, DataDetail.CurrentBundle, DataDetail.Name)
			end
		elseif DataDetail.CurrentBundle ~= "nil" and Bundle[DataDetail.CurrentBundle]["Override"] == true then
			-- Handle override bundles
			if DataDetail.CurrentBundle ~= "Bald" then
				Function.AccessoryLoaderFunction(Character, CharacterAttachment, DataDetail.CurrentBundle, DataDetail.Name)
				Function.BodyColorsFunction(Character, DataDetail.CurrentBundle, DataDetail.Name)
			end
		end

		-- Update bundle state
		BundleState.CurrentBundle = DataDetail.CurrentBundle
	end